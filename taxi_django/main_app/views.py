from time import perf_counter

import requests
import json
import os
from rest_framework import generics, status
from rest_framework.exceptions import ValidationError
from rest_framework.generics import ListAPIView
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views import View
from rest_framework.decorators import action

from .models import *
from .serializers import *

class StockView(ListAPIView):
    serializer_class = StockSerializer
    queryset = Stocks.objects.all()


class StocksDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Stocks.objects.all()
    serializer_class = StockSerializer

    def partial_update(self, request, *args, **kwargs):
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=True)

        try:
            serializer.is_valid(raise_exception=True)
        except ValidationError as e:
            return JsonResponse({"errors": e.detail}, status=status.HTTP_400_BAD_REQUEST)

        self.perform_update(serializer)
        return JsonResponse(serializer.data)

class RefKeyListCreateView(generics.ListCreateAPIView):
    serializer_class = RefKeySerializer

    def get_queryset(self):
        queryset = RefKey.objects.all()
        name = self.request.query_params.get('name', None)

        if name:
            queryset = queryset.filter(name__icontains=name)

        return queryset

class RefKeyRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = RefKey.objects.all()
    serializer_class = RefKeySerializer


@csrf_exempt
def get_messages(request):
    if request.method == 'GET':
        messages = Appeals.objects.filter(status=True).order_by('-dt')
        serializer = AppealsSerializer(messages, many=True)
        return JsonResponse(serializer.data, safe=False)

class AppealsHistoryGet(generics.ListCreateAPIView):
    queryset = Appeals.objects.filter(status=False).order_by('-dt')
    serializer_class = AppealsSerializer

class AppealsView(generics.UpdateAPIView):
    serializer_class = AppealsSerializer

    def update(self, request, *args, **kwargs):
        id = kwargs.get('pk')
        try:
            appeal = Appeals.objects.get(id=id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Appeals –ø–æ id
            appeal.status = False  # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ False
            appeal.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            return JsonResponse({"message": "Status updated successfully!"}, status=status.HTTP_200_OK)
        except Appeals.DoesNotExist:

            return JsonResponse({"error": "Appeal not found."}, status=status.HTTP_404_NOT_FOUND)

@csrf_exempt
def get_user_status(request):
    if request.method == 'GET':
        try:
            user = Users.objects.filter(res_status=True, auth_status=False)
            serializer = UserSerializer(user, many=True)
            return JsonResponse(serializer.data, safe=False)
        except Users.DoesNotExist:
            return JsonResponse({'status': 'not_found'}, status=404)


class SendMessageView(View):
    def post(self, request, *args, **kwargs):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç id –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            data = json.loads(request.body)
            chat_id = data.get('chat_id')
            message = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.'
            url = f'https://api.telegram.org/bot{os.getenv("BOT_TOKEN")}/sendMessage'
            payload = {
                'chat_id': chat_id,
                'text': message
            }
            response = requests.post(url, json=payload)

            if response.status_code == 200:
                # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ–º message_id –≤ –ë–î
                user = Users.objects.filter(chat_id=chat_id).first()
                json_answer = response.json()
                message_id = json_answer['result']['message_id']
                Messages.objects.create(
                    user_id=user.id,
                    message_id=message_id,
                )
                return JsonResponse({'status': 'Message send successfully!'})
            else:
                return JsonResponse({'error': 'Failed to send message.'}, status=response.status_code)
        except Exception as err:
            print(err)


class DeleteMessageView(View):
    def post(self, request, *args, **kwargs):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç id
            data = json.loads(request.body)
            chat_id = data.get('chat_id')
            # –ù–∞—Ö–æ–¥–∏–º —é–∑–µ—Ä–∞
            user = Users.objects.filter(chat_id=chat_id).first()
            if not user:
                return JsonResponse({'error': 'User not found'}, status=404)
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
            user.auth_status = True
            user.save()
            # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = Messages.objects.filter(user_id=user.id).first()
            if not message:
                return JsonResponse({'error': 'Message for delete not found'}, status=404)
            else:
                url = f'https://api.telegram.org/bot{os.getenv("BOT_TOKEN")}/deleteMessage'
                payload = {
                    'chat_id': chat_id,
                    'message_id': message.message_id
                }
                response_del_mess = requests.post(url, data=payload)
                if response_del_mess.status_code == 200:
                    message.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –∑–∞–ø–∏—Å—ã–∞–µ–º message_id –≤ –ë–î
            url_accep_mess = f'https://api.telegram.org/bot{os.getenv("BOT_TOKEN")}/sendMessage'
            text = ('–¢–∞–∫—Å–æ–ø–∞—Ä–∫ ‚Äú–≠–∫—Å–ø–∞–Ω—Å–∏—è‚Äù –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü.—Å–µ—Ç—è—Ö.\n'
                    '–ù–∞—à –∫–∞–Ω–∞–ª –≤ Telegram{}üí¨ –≥–¥–µ –º—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n'
                    '–ù–∞—à –∫–∞–Ω–∞–ª –Ω–∞ YouTube{}üìπ –∏ VkVideo{} üéû –≥–¥–µ –º—ã –ø—É–±–ª–∏–∫—É–µ–º —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n'
                    '–ë—É–¥—å –≤ —Ç–µ–º–µ —Å ‚Äú–≠–∫—Å–ø–∞–Ω—Å–∏–µ–π‚Äù!')
            payload_accep_mess = {
                "chat_id": chat_id,
                "text": text,
                "reply_markup": {
                    "inline_keyboard":
                        [
                            [{"text": "–°–º–µ–Ω–∞", "callback_data": "shift"}],
                            [{"text": "–ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏", "callback_data": "bonus"}],
                            [{"text": "–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "my_stats"}, {"text": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º", "callback_data": "profile"}],
                            [{"text": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∫–µ", "callback_data": "info_park"}, {"text": "–°–≤—è–∑—å —Å –Ω–∞–º–∏", "callback_data": "call_for"}],
                        ]
                }
            }
            response_accep_mess = requests.post(url_accep_mess, json=payload_accep_mess)
            if response_accep_mess.status_code == 200:
                res_accep_mess_json = response_accep_mess.json()
                Messages.objects.create(
                    user_id=user.id,
                    message_id=res_accep_mess_json['result']['message_id'],
                )
                return JsonResponse({'status': 'Message deleted successfully and send new message!'}, status=200)
            else:
                return JsonResponse({'error': 'New message not send.'}, status=response_accep_mess.status_code)

        except Exception as err:
            print(err)