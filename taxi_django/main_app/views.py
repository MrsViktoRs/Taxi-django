import logging
import requests
import json
import os
from rest_framework import generics, status
from rest_framework.exceptions import ValidationError
from rest_framework.generics import ListAPIView, RetrieveUpdateAPIView
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views import View
from django.db.models import Q
from rest_framework.status import HTTP_201_CREATED, HTTP_400_BAD_REQUEST, HTTP_409_CONFLICT
from rest_framework.views import APIView
from django.contrib.auth.hashers import make_password
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import AccessToken

from .models import Users, UserCredentials
from .serializers import *

logger = logging.getLogger(__name__)


class CreateAdminView(APIView):
    def post(self, request):
        username = request.data.get('username')
        password = make_password(request.data.get('password'))
        try:
            UserCredentials.objects.create(username=username, password=password)
        except Exception as err:
            logger.error(err)
            return JsonResponse(f'username already exists', safe=False, status=HTTP_409_CONFLICT)

        return JsonResponse(f"Create amdin", safe=False, status=HTTP_201_CREATED)


class LoginView(APIView):
    def post(self, request):
        data = request.data['regData']
        try:
            credentials = UserCredentials.objects.get(username=data['username'])
            if credentials.check_password(data['password']):
                access_token = AccessToken.for_user(credentials)
                return Response({'token': str(access_token)}, status=200)
            else:
                return Response({'error': 'Invalid credentials'}, status=400)
        except UserCredentials.DoesNotExist:
            return Response({'error': 'User not found'}, status=404)


class StockView(ListAPIView):
    serializer_class = StockSerializer
    queryset = Stocks.objects.all()


class StocksDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Stocks.objects.all()
    serializer_class = StockSerializer

    def partial_update(self, request, *args, **kwargs):
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=True)

        try:
            serializer.is_valid(raise_exception=True)
        except ValidationError as e:
            return JsonResponse({"errors": e.detail}, status=status.HTTP_400_BAD_REQUEST)

        self.perform_update(serializer)
        return JsonResponse(serializer.data)

class RefKeyListCreateView(generics.ListCreateAPIView):
    serializer_class = RefKeySerializer

    def get_queryset(self):
        queryset = RefKey.objects.all()
        name = self.request.query_params.get('name', None)
        phone = self.request.query_params.get('phone', None)

        if name:
            queryset = queryset.filter(name__icontains=name)

        if phone:
            queryset = queryset.filter(user__phone__icontains=phone)

        return queryset

class RefKeyRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = RefKey.objects.all()
    serializer_class = RefKeySerializer


@csrf_exempt
def get_messages(request):
    if request.method == 'GET':
        messages = Appeals.objects.filter(status=True).order_by('-dt')
        serializer = AppealsSerializer(messages, many=True)
        return JsonResponse(serializer.data, safe=False)

class AppealsHistoryGet(generics.ListCreateAPIView):
    serializer_class = AppealsSerializer

    def get_queryset(self):
        query = self.request.query_params.get('search', None)
        queryset = Appeals.objects.filter(status=False).order_by('-dt')

        if query:
            queryset = queryset.filter(
                Q(user__name__icontains=query) |  # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
                Q(user__surname__icontains=query) |  # –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏
                Q(user__patronymic__icontains=query)  # –ü–æ–∏—Å–∫ –ø–æ –æ—Ç—á–µ—Å—Ç–≤—É
            )

        return queryset

class AppealsView(generics.UpdateAPIView):
    serializer_class = AppealsSerializer

    def update(self, request, *args, **kwargs):
        id = kwargs.get('pk')
        try:
            appeal = Appeals.objects.get(id=id)
            appeal.status = False
            appeal.save()
            return JsonResponse({"message": "Status updated successfully!"}, status=status.HTTP_200_OK)
        except Appeals.DoesNotExist:

            return JsonResponse({"error": "Appeal not found."}, status=status.HTTP_404_NOT_FOUND)

@csrf_exempt
def get_user_status(request):
    if request.method == 'GET':
        try:
            user = Users.objects.filter(res_status=True, auth_status=False)
            serializer = UserSerializer(user, many=True)
            return JsonResponse(serializer.data, safe=False)
        except Users.DoesNotExist:
            return JsonResponse({'status': 'not_found'}, status=404)


class SendMessageView(View):
    def post(self, request, *args, **kwargs):
        try:
            data = json.loads(request.body)
            chat_id = data.get('chat_id')
            message = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.'
            url = f'https://api.telegram.org/bot{os.getenv("BOT_TOKEN")}/sendMessage'
            payload = {
                'chat_id': chat_id,
                'text': message
            }
            response = requests.post(url, json=payload)

            if response.status_code == 200:
                user = Users.objects.filter(chat_id=chat_id).first()
                json_answer = response.json()
                message_id = json_answer['result']['message_id']
                Messages.objects.create(
                    user_id=user.id,
                    message_id=message_id,
                )
                return JsonResponse({'status': 'Message send successfully!'})
            else:
                return JsonResponse({'error': 'Failed to send message.'}, status=response.status_code)
        except Exception as err:
            print(err)


class DeleteMessageView(View):
    def post(self, request, *args, **kwargs):
        try:
            data = json.loads(request.body)
            chat_id = data['chat_id']
            name = data['name']
            surname = data['surname']
            patronymic = data['patronymic']
            user = Users.objects.filter(chat_id=chat_id).first()
            if not user:
                return JsonResponse({'error': 'User not found'}, status=404)
            role = Role.objects.filter(user_id=user.id).first()
            if not role:
                logger.warning(f'request: /accept_message/ \nstatus: role is {role}')
                return JsonResponse({"error": "Role not found"}, status=403, safe=False)
            message = Messages.objects.filter(user_id=user.id).all()
            user.name = name
            user.surname = surname
            user.patronymic = patronymic
            user.auth_status = True
            user.save()
            if len(message) != 0:
                url = f'https://api.telegram.org/bot{os.getenv("BOT_TOKEN")}/deleteMessage'
                for mess in message:
                    payload = {
                        'chat_id': chat_id,
                        'message_id': mess.message_id
                    }
                    response_del_mess = requests.post(url, data=payload)
                    if response_del_mess.status_code != 200:
                        logger.warning(f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å Telegram: {response_del_mess.status_code}')
                        mess.delete()
                    else:
                        mess.delete()
            else:
                logger.warning('–°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç')
            url_accep_mess = f'https://api.telegram.org/bot{os.getenv("BOT_TOKEN")}/sendMessage'
            if role.name == 'driver':
                text = ("–ê —Ç—ã —Å–º–æ—Ç—Ä–µ–ª –≤–∏–¥–µ–æ ¬´–≠–∫—Å–ø–∞–Ω—Å–∏–∏¬ª –≤ —Å–æ—Ü.—Å–µ—Ç—è—Ö‚ùì‚ùóÔ∏è\n"
                        "–ù–∞—à –∫–∞–Ω–∞–ª –≤ [Telegram](t.me/ExpansiyaTaxi)üí¨ –≥–¥–µ –º—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n\n"
                        "–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã –Ω–∞ \n"
                        "üìπ [YouTube](youtube.com/@ExpanciaTaxi)\n"
                        "üåê [VkVideo](vk.com/expansiyataxi)\n"
                        "üì∑ [Instagram](instagram.com/expansion_taxi)\n"
                        "üï∫ [Tik-Tok](tiktok.com/@expansion_taxi)\n"
                        "–≥–¥–µ –º—ã –ø—É–±–ª–∏–∫—É–µ–º —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
                        "–ë—É–¥—å –≤ —Ç–µ–º–µ —Å ¬´–≠–∫—Å–ø–∞–Ω—Å–∏–µ–π¬ª !")
                payload_accep_mess = {
                    "chat_id": chat_id,
                    "text": text,
                    'parse_mode': 'Markdown',
                    "reply_markup": {
                        "inline_keyboard":
                            [
                                [{"text": "–°–º–µ–Ω–∞", "callback_data": "shift"}],
                                [{"text": "–ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏", "callback_data": "bonus"}],
                                [{"text": "–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "my_stats"}, {"text": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º", "callback_data": "profile"}],
                                [{"text": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∫–µ", "callback_data": "info_park"}, {"text": "–°–≤—è–∑—å —Å –Ω–∞–º–∏", "callback_data": "call_for"}],
                            ]
                    }
                }
                response_accep_mess = requests.post(url_accep_mess, json=payload_accep_mess)
            elif role.name == 'partner':
                text = (
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫ –≠–∫—Å–ø–∞–Ω—Å–∏—è‚úã.\n"
                    "–° –Ω–∞–º–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—ã—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–ºüöò —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!\n"
                    "–ú—ã –¥–µ–ª–∏–º—Å—è —Å–≤–æ–∏–º –¥–æ—Ö–æ–¥–æ–ºüí∞ —Å –≤–∞–º–∏, –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–∞—à–µ–º –ø–∞—Ä–∫–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫–∞–∑—ã, –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 50% –æ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –ø–∞—Ä–∫–∞.\n"
                    "–ü–æ–¥—Ä–æ–±–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:\n"
                    "–ü–æ–ª—É—á–∞–π –ø–æ 2‚ÇΩüí∞ —Å –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ –∏–ª–∏üë¨ 1‚ÇΩ –µ—Å–ª–∏ –æ–Ω —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π.\n"
                    "–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –±—É–¥—É—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ 3—Ö –º–µ—Å—è—Ü–µ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.\n"
                    "–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –æ–¥–∏–Ω —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –≤ –ø–µ—Ä–∏–æ–¥ —Å 1-5 —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞(–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö).\n"
                    "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é —Ç—ã –º–æ–∂–µ—à—å –ø–æ –∫–Ω–æ–ø–∫–µ ‚Äú–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞‚Äùüëá)\n"
                )
                payload_accep_mess = {
                    "chat_id": chat_id,
                    "text": text,
                    'parse_mode': 'Markdown',
                    "reply_markup": {
                        "inline_keyboard":
                            [
                                [{"text": "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞", "callback_data": "profile_parther"}],
                                [{"text": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ü–∏—è–º", "callback_data": "stats_action"}],
                                [{"text": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∫–µ", "callback_data": "info_park"}],
                                [{"text": "–°–≤—è–∑—å —Å –Ω–∞–º–∏", "callback_data": "call_for"}],
                            ]
                    }
                }
                response_accep_mess = requests.post(url_accep_mess, json=payload_accep_mess)
            else:
                logger.warning(f'–ù–µ—Ç —Ç–∞–∫–æ–π —Ä–æ–ª–∏\nUser: \nid: {user.id} \nchat_id:{user.chat_id} \nphone: {user.phone}')
                return JsonResponse({'status': 'role is not found'}, status=403)
            if response_accep_mess.status_code == 200:
                res_accep_mess_json = response_accep_mess.json()
                Messages.objects.create(
                    user_id=user.id,
                    message_id=res_accep_mess_json['result']['message_id'],
                )
                return JsonResponse({'status': 'Message deleted successfully and send new message!'}, status=200)
            else:
                return JsonResponse({'error': 'New message not send.'}, status=404)

        except Exception as err:
            logger.error(err)
            print(err)
            return JsonResponse({'error': 'exception'}, status=405)


class UserRetrieveView(APIView):
    def get(self, request, phone):
        try:
            user = Users.objects.get(phone=phone)
            serializer = UserSerializer(user)

            return JsonResponse(serializer.data, status=status.HTTP_200_OK)

        except Users.DoesNotExist:
            return JsonResponse({"error": "User not found."}, status=status.HTTP_404_NOT_FOUND)

    def post(self, request, phone):
        try:
            user = Users.objects.get(phone=phone)
            data = request.data
            serializer = UserSerializer(instance=user, data=data, partial=True)
            if serializer.is_valid():
                serializer.save()
                return JsonResponse(serializer.data, status=status.HTTP_200_OK, safe=False)
            else:
                return JsonResponse(serializer.errors, status=status.HTTP_400_BAD_REQUEST, safe=False)

        except Users.DoesNotExist:
            return JsonResponse({"error": "User not found."}, status=status.HTTP_404_NOT_FOUND)


class UserListView(ListAPIView):
    serializer_class = UserSerializer

    def get_queryset(self):
        queryset = Users.objects.filter(res_status=True, auth_status=True)
        phone = self.request.query_params.get('phone', None)
        name = self.request.query_params.get('name', None)
        surname = self.request.query_params.get('surname', None)
        patronymic = self.request.query_params.get('patronymic', None)

        if phone:
            queryset = queryset.filter(phone=phone)
        if name:
            queryset = queryset.filter(name=name)
        if surname:
            queryset = queryset.filter(surname=surname)
        if patronymic:
            queryset = queryset.filter(patronymic=patronymic)

        return queryset


class UserDetailView(RetrieveUpdateAPIView):
    serializer_class = UserSerializer
    queryset = Users.objects.filter(res_status=True, auth_status=True)


class ActiveMessageView(APIView):

    def get(self, request):
        messages = ActiveMessage.objects.all()
        serializer = ActiveMessageSerializer(messages, many=True)
        return JsonResponse(serializer.data, status=status.HTTP_200_OK, safe=False)

    def post(self, request):
        serializer = ActiveMessageSerializer(data=request.data)
        if serializer.is_valid():
            whom_value = serializer.validated_data['whom']
            if whom_value == '–í—Å–µ–º':
                serializer.validated_data['whom'] = 'all'
            elif whom_value == '–í–æ–¥–∏—Ç–µ–ª—è–º':
                serializer.validated_data['whom'] = 'driver'
            elif whom_value == '–ü–∞—Ä—Ç–Ω—ë—Ä–∞–º':
                serializer.validated_data['whom'] = 'partner'
            serializer.save()
            return JsonResponse('True', status=status.HTTP_201_CREATED, safe=False)
        return JsonResponse(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk=None):
        try:
            message = ActiveMessage.objects.get(pk=pk)
            message.delete()
            return JsonResponse(data='–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', status=status.HTTP_204_NO_CONTENT, safe=False)
        except ActiveMessage.DoesNotExist:
            return JsonResponse(data='–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ', status=status.HTTP_404_NOT_FOUND, safe=False)

    def put(self, request, pk=None):
        try:
            message = ActiveMessage.objects.get(pk=pk)
            serializer = ActiveMessageSerializer(message, data=request.data)
            if serializer.is_valid():
                serializer.save()
                return JsonResponse(serializer.data, status=status.HTTP_200_OK)

            return JsonResponse(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except ActiveMessage.DoesNotExist as err:
            return JsonResponse(err, status=status.HTTP_404_NOT_FOUND)


class PartnerListAPIView(ListAPIView):
    queryset = Users.objects.filter(auth_status=False)
    serializer_class = UserSerializer
    def get_queryset(self):
        qs = super().get_queryset()
        partner_users = qs.filter(roles__name='partner')
        return JsonResponse(partner_users, safe=False)


